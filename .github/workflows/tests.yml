name: Tests

# D√©clencher les tests sur push et pull request
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    
    # Services n√©cessaires (base de donn√©es PostgreSQL)
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: "!ChangeMe!"
          POSTGRES_USER: app
          POSTGRES_DB: app_test
        options: >-
          --health-cmd "pg_isready -U app"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    # 1. R√©cup√©rer le code source
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Configurer PHP
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, dom, filter, gd, json, pgsql
        coverage: none

    # 3. Valider le composer.json
    - name: Validate composer.json
      run: composer validate --strict

    # 4. Cache des d√©pendances Composer
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    # 5. Installer les d√©pendances
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

    # 5.5. Attendre que la base de donn√©es soit pr√™te
    - name: Wait for database to be ready
      run: |
        for i in {1..30}; do
          if pg_isready -h 127.0.0.1 -p 5432 -U app; then
            echo "‚úÖ Base de donn√©es pr√™te"
            break
          fi
          echo "‚è≥ Attente de la base de donn√©es... ($i/30)"
          sleep 2
        done

    # 6. Configurer l'environnement de test
    - name: Setup test environment
      run: |
        cp .env.test .env.test.local
        echo "DATABASE_URL=postgresql://app:!ChangeMe!@127.0.0.1:5432/app_test?serverVersion=16&charset=utf8" >> .env.test.local
        echo "MAILER_DSN=null://null" >> .env.test.local
        echo "MAILER_FROM_EMAIL=test@example.com" >> .env.test.local
        echo 'MAILER_FROM_NAME="Test Service"' >> .env.test.local

    # 8. Cr√©er la base de donn√©es et les tables
    - name: üóÑÔ∏è Create database
      run: |
        # Attendre que PostgreSQL soit compl√®tement pr√™t
        for i in {1..10}; do
          if PGPASSWORD="!ChangeMe!" psql -h 127.0.0.1 -U app -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
            echo "‚úÖ PostgreSQL est pr√™t"
            break
          fi
          echo "‚è≥ Attente PostgreSQL... ($i/10)"
          sleep 2
        done
        
        # Cr√©er les bases de donn√©es n√©cessaires
        PGPASSWORD="!ChangeMe!" createdb -h 127.0.0.1 -U app app_test || echo "Base app_test existe d√©j√†"
        PGPASSWORD="!ChangeMe!" createdb -h 127.0.0.1 -U app app || echo "Base app existe d√©j√†"
        
        # V√©rifier que la base de test est accessible
        PGPASSWORD="!ChangeMe!" psql -h 127.0.0.1 -U app -d app_test -c "SELECT version();"
        
        # Cr√©er et migrer via Symfony (pour la base de test)
        php bin/console doctrine:migrations:migrate --no-interaction --env=test

    # 9. Charger les fixtures (donn√©es de test)
    - name: Load fixtures
      run: php bin/console doctrine:fixtures:load --env=test --no-interaction

    # 10. Lancer tous les tests PHPUnit
    - name: Run PHPUnit tests
      run: php bin/phpunit --testdox

    # 11. V√©rifier la qualit√© du code (optionnel)
    - name: Check coding standards (optional)
      run: |
        if [ -f "vendor/bin/php-cs-fixer" ]; then
          vendor/bin/php-cs-fixer fix --dry-run --diff
        else
          echo "PHP CS Fixer not installed, skipping..."
        fi
      continue-on-error: true
