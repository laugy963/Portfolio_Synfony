{% extends 'base.html.twig' %}

{% block title %}Cr√©er un compte{% endblock %}

{% block body %}
<div class="form-page">
    <!-- Barre de navigation en haut -->
    <nav class="navbar navbar-expand-lg navbar-dark fixed-top">
        <div class="container">
            <a class="navbar-brand fw-bold text-primary" href="{{ path('app_home') }}">
                <i class="fas fa-home me-2"></i>Portfolio
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ path('app_login') }}">
                            <i class="fas fa-sign-in-alt me-1"></i>Connexion
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- En-t√™te avec sous-titre -->
    <header class="header">
        <div class="container text-center">
            <h1 class="header-title">Cr√©er un compte</h1>
        </div>
    </header>

    <section class="form-section">
        {# Affichage des messages flash #}
        {% for type, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ type == 'error' ? 'danger' : type }} mb-4">
                    <i class="fas fa-{{ type == 'success' ? 'check-circle' : 'exclamation-triangle' }} me-2"></i>
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}

        {{ form_start(registrationForm, {'attr': {'class': 'form-container', 'novalidate': 'novalidate'}}) }}
            
            <div class="registration-header mb-4">
                <h2 class="form-title">Rejoignez-nous</h2>
                <p class="form-subtitle">Cr√©ez votre compte pour acc√©der √† toutes les fonctionnalit√©s</p>
            </div>

            <div class="form-row">
                <div class="form-group form-half">
                    {{ form_label(registrationForm.firstName, null, {'label_attr': {'class': 'form-label'}}) }}
                    <div class="input-container">
                        <i class="fas fa-user input-icon"></i>
                        {{ form_widget(registrationForm.firstName) }}
                    </div>
                    {{ form_errors(registrationForm.firstName) }}
                </div>

                <div class="form-group form-half">
                    {{ form_label(registrationForm.lastName, null, {'label_attr': {'class': 'form-label'}}) }}
                    <div class="input-container">
                        <i class="fas fa-user input-icon"></i>
                        {{ form_widget(registrationForm.lastName) }}
                    </div>
                    {{ form_errors(registrationForm.lastName) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.email, null, {'label_attr': {'class': 'form-label'}}) }}
                <div class="input-container">
                    <i class="fas fa-envelope input-icon"></i>
                    {{ form_widget(registrationForm.email) }}
                </div>
                {{ form_errors(registrationForm.email) }}
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.plainPassword.first, null, {'label_attr': {'class': 'form-label'}}) }}
                <div class="password-input-container">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form_widget(registrationForm.plainPassword.first, {'attr': {'class': 'form-input password-input', 'id': 'password'}}) }}
                    <button type="button" class="password-toggle-btn" onclick="togglePasswordByButton(this)" title="Afficher/Masquer le mot de passe">
                        <i class="fas fa-eye-slash" id="password-toggle-icon-1"></i>
                        <span class="password-toggle-fallback" id="password-toggle-fallback-1" style="display: none;">üôà</span>
                    </button>
                </div>
                {{ form_errors(registrationForm.plainPassword.first) }}
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.plainPassword.second, null, {'label_attr': {'class': 'form-label'}}) }}
                <div class="password-input-container">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form_widget(registrationForm.plainPassword.second, {'attr': {'class': 'form-input password-input', 'id': 'password-confirm'}}) }}
                    <button type="button" class="password-toggle-btn" onclick="togglePasswordByButton(this)" title="Afficher/Masquer le mot de passe">
                        <i class="fas fa-eye-slash" id="password-toggle-icon-2"></i>
                        <span class="password-toggle-fallback" id="password-toggle-fallback-2" style="display: none;">üôà</span>
                    </button>
                </div>
                {{ form_errors(registrationForm.plainPassword.second) }}
            </div>

            <div class="form-group checkbox-group">
                <div class="checkbox-container">
                    {{ form_widget(registrationForm.agreeTerms) }}
                    {{ form_label(registrationForm.agreeTerms, null, {'label_attr': {'class': 'checkbox-label'}}) }}
                </div>
                {{ form_errors(registrationForm.agreeTerms) }}
            </div>

            <div class="form-group">
                <button type="submit" class="form-button">
                    <i class="fas fa-user-plus me-2"></i>Cr√©er mon compte
                </button>
            </div>

            <div class="form-footer">
                <p class="text-center">
                    Vous avez d√©j√† un compte ? 
                    <a href="{{ path('app_login') }}" class="link-primary">Se connecter</a>
                </p>
            </div>

        {{ form_end(registrationForm) }}
    </section>

    <footer id="main_footer" class="footer">
        <div class="container text-center">
            <p>&copy; 2025 Portfolio. Tous droits r√©serv√©s.</p>
        </div>
    </footer>

    <script>
        function togglePasswordField(inputId, iconId) {
            console.log('togglePasswordField appel√©e avec:', inputId, iconId);
            
            const passwordInput = document.getElementById(inputId);
            const toggleIcon = document.getElementById(iconId);
            const fallbackId = iconId.replace('icon', 'fallback');
            const toggleFallback = document.getElementById(fallbackId);
            
            console.log('√âl√©ments trouv√©s:', {
                passwordInput: passwordInput,
                toggleIcon: toggleIcon,
                toggleFallback: toggleFallback,
                inputType: passwordInput ? passwordInput.type : 'null'
            });
            
            if (!passwordInput) {
                console.error('Input de mot de passe non trouv√©:', inputId);
                return;
            }
            
            if (!toggleIcon) {
                console.error('Ic√¥ne toggle non trouv√©e:', iconId);
                return;
            }
            
            if (passwordInput.type === 'password') {
                // Afficher le mot de passe
                passwordInput.type = 'text';
                // Ic√¥ne ≈ìil ouvert (le mot de passe est visible)
                toggleIcon.classList.remove('fa-eye-slash');
                toggleIcon.classList.add('fa-eye');
                // Fallback emoji - ≈ìil ouvert
                if (toggleFallback) {
                    toggleFallback.textContent = 'üëÅÔ∏è';
                }
                console.log('Mot de passe affich√© pour:', inputId);
            } else {
                // Masquer le mot de passe
                passwordInput.type = 'password';
                // Ic√¥ne ≈ìil barr√© (le mot de passe est masqu√©)
                toggleIcon.classList.remove('fa-eye');
                toggleIcon.classList.add('fa-eye-slash');
                // Fallback emoji - ≈ìil ferm√©/cach√©
                if (toggleFallback) {
                    toggleFallback.textContent = 'üôà';
                }
                console.log('Mot de passe masqu√© pour:', inputId);
            }
        }

        // Fonction alternative bas√©e sur la proximit√© des √©l√©ments
        function togglePasswordByButton(button) {
            console.log('togglePasswordByButton appel√©e');
            
            const container = button.closest('.password-input-container');
            if (!container) {
                console.error('Container parent non trouv√©');
                return;
            }
            
            const passwordInput = container.querySelector('input[type="password"], input[type="text"]');
            const toggleIcon = button.querySelector('i[class*="fa-eye"]');
            const toggleFallback = button.querySelector('.password-toggle-fallback');
            
            if (!passwordInput) {
                console.error('Input de mot de passe non trouv√© dans le container');
                return;
            }
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                if (toggleIcon) {
                    toggleIcon.classList.remove('fa-eye-slash');
                    toggleIcon.classList.add('fa-eye');
                }
                if (toggleFallback) {
                    toggleFallback.textContent = 'üëÅÔ∏è';
                }
                console.log('Mot de passe affich√© (m√©thode proximit√©)');
            } else {
                passwordInput.type = 'password';
                if (toggleIcon) {
                    toggleIcon.classList.remove('fa-eye');
                    toggleIcon.classList.add('fa-eye-slash');
                }
                if (toggleFallback) {
                    toggleFallback.textContent = 'üôà';
                }
                console.log('Mot de passe masqu√© (m√©thode proximit√©)');
            }
        }

        // Validation en temps r√©el
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page d\'inscription charg√©e, initialisation...');
            
            const password = document.getElementById('password');
            const passwordConfirm = document.getElementById('password-confirm');
            
            console.log('Champs de mot de passe:', {
                password: password,
                passwordConfirm: passwordConfirm
            });
            
            function validatePasswords() {
                if (password.value && passwordConfirm.value) {
                    if (password.value === passwordConfirm.value) {
                        passwordConfirm.style.borderColor = 'var(--accent-green)';
                        passwordConfirm.style.boxShadow = '0 0 0 3px rgba(16, 185, 129, 0.1)';
                    } else {
                        passwordConfirm.style.borderColor = '#dc2626';
                        passwordConfirm.style.boxShadow = '0 0 0 3px rgba(220, 38, 38, 0.1)';
                    }
                } else {
                    // Remettre le style par d√©faut
                    passwordConfirm.style.borderColor = '';
                    passwordConfirm.style.boxShadow = '';
                }
            }
            
            if (password && passwordConfirm) {
                password.addEventListener('input', validatePasswords);
                passwordConfirm.addEventListener('input', validatePasswords);
            }

            // Test des boutons de toggle
            const toggleButtons = document.querySelectorAll('.password-toggle-btn');
            console.log('Boutons toggle trouv√©s:', toggleButtons.length);
            
            toggleButtons.forEach(function(button, index) {
                console.log('Bouton toggle ' + (index + 1) + ':', button);
                
                // Test du clic
                button.addEventListener('click', function() {
                    console.log('Clic d√©tect√© sur bouton toggle ' + (index + 1));
                });
            });

            // V√©rification si Font Awesome est charg√©
            const toggleIcons = document.querySelectorAll('[id^="password-toggle-icon-"]');
            const toggleFallbacks = document.querySelectorAll('[id^="password-toggle-fallback-"]');
            
            console.log('Ic√¥nes trouv√©es:', toggleIcons.length, 'Fallbacks trouv√©s:', toggleFallbacks.length);
            
            setTimeout(function() {
                toggleIcons.forEach(function(icon, index) {
                    const computedStyle = window.getComputedStyle(icon, '::before');
                    if (computedStyle.content === 'none' || computedStyle.content === '""') {
                        // Font Awesome non disponible, utiliser le fallback
                        console.log('Font Awesome non disponible pour ic√¥ne ' + (index + 1) + ', utilisation du fallback');
                        icon.style.display = 'none';
                        if (toggleFallbacks[index]) {
                            toggleFallbacks[index].style.display = 'inline';
                        }
                    } else {
                        console.log('Font Awesome disponible pour ic√¥ne ' + (index + 1));
                    }
                });
            }, 100);

            // Gestion du clavier pour les boutons toggle
            toggleButtons.forEach(function(button) {
                button.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        button.click();
                    }
                });
            });
        });
    </script>
</div>
{% endblock %}
